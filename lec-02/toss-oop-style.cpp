//toss-oop.cpp
/*
Objects.      Attributes.    Behavior        
Dice.        value, sides.   roll, display
Player.      name, score,    set and get name
             turn,           playToss
             pair of die     
*/

// Includes a parameterized constructor
// The purpose of the constructor is 
// to do some initial setup at the time
// a object is created. For example- set
// the member variables to default values

#include <iostream>
#include <time.h>
using namespace std;


class Player{

public:
	// Player(); // Default constructor
	// Generated automatically by the
	// compiler if NO constructor is 
	// defined in the class

	Player(string playerName=""); // Parametrized constructor
	// If you write this, the compiler will not generate a 
	// default constructor

	void setName(string input); //modifier
	string getName() const; // accessor
	int playToss(); // roll the die,
				// returns a score, display the die values and the score

private:
    string name;
	int score;

};


/*Player::Player(){
	The default constructor generated by
	the compiler looks like this.
	It doesn't really do anything.
	The reason its there is that the compiler
	invokes a constructor everytime an instance
	of the class is created.
	For example in main(), the default
	constructor is invoked when each of the
	following lines of code are executed:
	
	Player p; // Default constructor is invoked
	Player p(); // Default constructor is invoked
	Player p("Jack"); // Parameterized constructor is invoke
	
	If only a default constructor is available
	then the third line Player p("Jack") will not work.
	We need to write a parameterized constructor
	as shown in our specific example.
}*/

Player::Player(string playerName){
	name = playerName;
}

void Player::setName(string input){
	name= input;
} //modifier

string Player::getName() const{
	return name;

} // accessor

int Player::playToss(){
	int dieOne = rand()%6 + 1;
	int dieTwo = rand()%6 + 1;
	
	if ( dieOne == dieTwo){
		score= 4*dieOne;
	}else{
		score= dieOne + dieTwo;
	}
	cout<<name<<"'s die values are: ";
	cout<<"("<< dieOne<<", "<<dieTwo<<") Score: "<<score<<endl;
	return score;
}


int main(){
	Player p3; /* This line will cause a compiler error
	if the class only has a parametrized constructor
	Inorder to avoid getting a compiler error you may
	   1. write a default constructor OR
	   2. modify the parameterized constructor to include 
	default values for the parameters (next lecture)
	*/
	Player p1("Jack"), p2("Jill");
	string winner;
	char play;
	srand(time(0));

	do{
		
		int score1 = p1.playToss();
		int score2 = p2.playToss();

		if(score1 == score2){
			cout<<"It's a Tie!"<<endl;
		}else{
			winner = score1> score2? p1.getName():p2.getName();
			cout<<winner<<" wins!!!"<<endl;
		}
		cout<<"Play again? (y/n) : ";
		cin>>play;

	}while(play == 'y');

	return 0;
}

/* Summary
1. classes = structs + methods
2. Abstract data types = classes + information hiding
3. When designing classes - 
	* identify the objects in your problem, 
	* specify the attributes and behaviors of objects.
The attributes are coded as the member variables
The behaviors are coded as the public member function
4. When designing your class think about who will use it
and how (in our case we first wrote the code in main to 
figure this out)
Keep the interfaces (public methods of the class) 
simple and minimal. At the same time, don't make each method
too complicated.
5. Keep information hidden (private) as much as possible
The code in main should not directly access member variables
- why is this important?
6. Write a constructor (or multiple) to do any initial setup. 
This would reduce having to write methods that are only called once!
*/ 















